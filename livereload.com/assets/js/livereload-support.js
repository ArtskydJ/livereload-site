// Generated by CoffeeScript 1.6.2
(function() {
  var InterdepContext, computeDerivedData, decodeQueryParams, handleFailedSubmittion, hookOther, maintainDependencies, platformName, saveToAndRestoreFromLocalStorage, serialize, setDefaultUrgency, setRadio, setValuesFromDictionary, showOther, update, updateOther,
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  platformName = (function() {
    switch (false) {
      case navigator.appVersion.indexOf('Win') === -1:
        return 'windows';
      case navigator.appVersion.indexOf('Mac') === -1:
        return 'mac';
      case navigator.appVersion.indexOf('Linux') === -1:
        return 'linux';
      default:
        return 'unknown';
    }
  })();

  saveToAndRestoreFromLocalStorage = function(id) {
    var $el, key;

    if (!window.localStorage) {
      return;
    }
    key = "saved." + id;
    $el = $('#' + id);
    if (window.localStorage.hasOwnProperty(key)) {
      $el.val(window.localStorage[key]);
    }
    $el.change(function() {
      return window.localStorage[key] = $el.val();
    });
    return void 0;
  };

  decodeQueryParams = function(query) {
    var item, key, params, pos, value, _i, _len, _ref;

    if (query == null) {
      query = window.location.search;
    }
    if (!query) {
      return {};
    }
    if (query[0] === '?') {
      query = query.substr(1);
    }
    params = {};
    _ref = query.split('&');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      pos = item.indexOf('=');
      if (pos !== -1) {
        key = decodeURIComponent(item.substr(0, pos));
        value = decodeURIComponent(item.substr(pos + 1));
      } else {
        key = decodeURIComponent(item);
        value = '';
      }
      params[key] = value;
    }
    return params;
  };

  setValuesFromDictionary = function(params) {
    var $el, key, value;

    for (key in params) {
      if (!__hasProp.call(params, key)) continue;
      value = params[key];
      if (!(key.match(/^\w+$/))) {
        continue;
      }
      $el = $('#' + key);
      if ($el.length > 0) {
        $el.val(value);
      }
    }
    return void 0;
  };

  InterdepContext = (function() {
    function InterdepContext(_updateFunc) {
      this._updateFunc = _updateFunc;
      this.update = __bind(this.update, this);
      this._hooked = {};
      this._enabled = {};
      this._userModified = {};
    }

    InterdepContext.prototype.showHide = function(selector, visibility) {
      var $el;

      $el = $(selector);
      if ($el.is(':visible') !== visibility) {
        return $el.toggle(visibility);
      }
    };

    InterdepContext.prototype.enable = function(selector, enabled) {
      var $el;

      $el = $(selector);
      this._enabled[$el.selector] = enabled;
      if (enabled) {
        return $el.removeAttr('disabled');
      } else {
        return $el.attr('disabled', true);
      }
    };

    InterdepContext.prototype.enableSubmit = function(formSelector, enabled) {
      var $buttons, $form,
        _this = this;

      $form = $(formSelector);
      formSelector = $form.selector;
      this._enabled[formSelector] = enabled;
      $buttons = $form.find('button[type=submit]');
      this.enable($buttons, enabled);
      if (this._markHooked(formSelector)) {
        return $form.submit(function(e) {
          if (!_this._enabled[formSelector]) {
            e.preventDefault();
            e.stopPropagation();
            return false;
          }
        });
      }
    };

    InterdepContext.prototype.switchPlaceholder = function(selector, cases) {
      var value;

      value = this._pickCase(cases);
      if (typeof value === 'string') {
        return $(selector).prop('placeholder', value);
      }
    };

    InterdepContext.prototype.switchValue = function(selector, cases) {
      var value;

      value = this._pickCase(cases);
      if (value != null) {
        return $(selector).val(value);
      }
    };

    InterdepContext.prototype._pickCase = function(cases) {
      var condition, value, _i, _len, _ref;

      for (_i = 0, _len = cases.length; _i < _len; _i++) {
        _ref = cases[_i], value = _ref[0], condition = _ref[1];
        if (condition) {
          return value;
        }
      }
      return void 0;
    };

    InterdepContext.prototype.isVisible = function(selector) {
      return this.valTest(selector, function(v) {
        return true;
      });
    };

    InterdepContext.prototype.valEq = function() {
      var selector, values;

      selector = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.valTest(selector, function(v) {
        return values.indexOf(v) !== -1;
      });
    };

    InterdepContext.prototype.valSet = function(selector) {
      return this.valTest(selector, function(v) {
        return !!v;
      });
    };

    InterdepContext.prototype.valTest = function(selector, test) {
      var $el;

      this.hook(selector);
      $el = $(selector);
      return $el.is(':visible') && test($el.val(), $el);
    };

    InterdepContext.prototype.update = function() {
      console.log("Interdep: updating state");
      return this._updateFunc(this);
    };

    InterdepContext.prototype._markHooked = function(selector) {
      if (this._hooked.hasOwnProperty(selector)) {
        return false;
      }
      this._hooked[selector] = true;
      return true;
    };

    InterdepContext.prototype.hook = function(selector) {
      if (!this._markHooked(selector)) {
        return;
      }
      if (!this._updateFunc) {
        return;
      }
      $(selector).on('change', this.update);
      return console.log("Interdep: listening to " + selector);
    };

    return InterdepContext;

  })();

  maintainDependencies = function(updateFunc) {
    var context;

    context = new InterdepContext(updateFunc);
    context.update();
    return context;
  };

  showOther = function(option, visible, options) {
    var $option, $other, $select, dontChangeFocus, hideOriginal, id, name, otherId, otherName, placeholder;

    if (options == null) {
      options = {};
    }
    hideOriginal = options.hideOriginal, dontChangeFocus = options.dontChangeFocus;
    $option = $(option);
    $select = $option.closest('select');
    id = $select.prop('id');
    name = $select.prop('name');
    otherId = id + '-other';
    otherName = name != null ? name : name + {
      '_other': void 0
    };
    $other = $('#' + otherId);
    if ($other.length === 0) {
      placeholder = $option.attr('data-other');
      $other = $('<input />', {
        id: otherId,
        name: otherName,
        type: 'type',
        "class": 'form-control',
        placeholder: placeholder
      });
      $select.after($other);
    }
    if ($other.is(':visible') !== visible) {
      $other.toggle(visible);
      if (visible && !dontChangeFocus) {
        return $other.focus();
      }
    }
  };

  updateOther = function(el, options) {
    if (options == null) {
      options = {};
    }
    return showOther(el, $(el).closest('select').val() === $(el).prop('value'), options);
  };

  hookOther = function(el) {
    var $el;

    $el = $(el);
    $el.closest('select').change(function() {
      return updateOther(el);
    });
    return updateOther(el, {
      dontChangeFocus: true
    });
  };

  computeDerivedData = function() {
    var c, data;

    c = new InterdepContext(null);
    data = {};
    data.isMyApp = c.valEq('#product', 'livereload-app');
    data.isUrgent = c.valEq('#category', 'refund');
    data.isLowPrio = !data.isMyApp || c.valEq('#category', 'free-license');
    data.isDefaultLowPrio = c.valEq('#category', 'feature-request');
    return data;
  };

  update = function(c) {
    var data, weblanguage, weblanguages, _i, _len;

    data = computeDerivedData();
    c.showHide('#guard-notice', c.valEq('#product', 'guard-livereload'));
    c.showHide('#sublime-text-notice', c.valEq('#product', 'sublime-text-plugin'));
    c.showHide('#category-group', data.isMyApp);
    c.showHide('#problem-group', c.valEq('#category', 'problem'));
    c.showHide('#web-stack-group', c.valEq('#problem', 'reloading-fails', 'compilation-fails', 'incorrect-output-path', 'other'));
    weblanguages = $('#weblanguage option').map(function(idx, el) {
      return el.value;
    }).filter(function(v) {
      return !!v;
    });
    for (_i = 0, _len = weblanguages.length; _i < _len; _i++) {
      weblanguage = weblanguages[_i];
      c.showHide("\#" + weblanguage + "-subgroup", c.valEq('#weblanguage', weblanguage));
    }
    c.showHide('#subject-group', !data.isMyApp || c.valSet('#category'));
    c.showHide('#body-group', !data.isMyApp || c.valSet('#category'));
    c.switchPlaceholder('#body', [["What would you like me to add to LiveReload?", c.valEq('#category', 'feature-request')], ["How can I help you?", true]]);
    c.showHide('#urgency-group', data.isMyApp && c.isVisible('#body') && !(data.isUrgent || data.isLowPrio));
    return c.enableSubmit('#ticket-form', c.isVisible('#body'));
  };

  setRadio = function(name, value) {
    console.log('setRadio', arguments);
    return $("input[type=radio][name=" + name + "]").each(function(idx, el) {
      console.log(el);
      if (el.value === value) {
        return $(el).prop('checked', true);
      }
    });
  };

  setDefaultUrgency = function() {
    var data;

    data = computeDerivedData();
    if (data.isDefaultLowPrio) {
      return setRadio('urgency', 'lowprio');
    } else if ($('input[name=urgency][value=lowprio]').is(':checked')) {
      return setRadio('urgency', 'week');
    }
  };

  serialize = function() {
    var data, details, fieldNames, _ref;

    details = {};
    fieldNames = [];
    $('#ticket-form :input').each(function(idx, el) {
      var $el, name;

      $el = $(el);
      name = $el.attr('name');
      if (name) {
        if (fieldNames.indexOf(name) === -1) {
          fieldNames.push(name);
        }
        if ($el.is(':visible') && (!$el.is('input[type=radio]') || $el.is(':checked'))) {
          return details[name] = $el.val();
        }
      }
    });
    data = computeDerivedData();
    if (data.isUrgent) {
      details.urgency = 'urgent';
    } else if (data.isLowPrio) {
      details.urgency = 'lowprio';
    } else {
      if ((_ref = details.urgency) == null) {
        details.urgency = 'week';
      }
    }
    return details;
  };

  handleFailedSubmittion = function(error) {
    return alert("Error submitting your ticket, sorry. Please email it to andrey@tarantsov.com instead.\nError: " + error);
  };

  jQuery(function($) {
    var emailCopyNoticeTemplate, id, updateEmailCopyNotice, urgencySetByUser, _i, _j, _len, _len1, _ref, _ref1;

    $('#ticket-form .hidden').removeClass('hidden');
    $('#platform').val(platformName);
    _ref = ['name', 'email', 'product'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      id = _ref[_i];
      saveToAndRestoreFromLocalStorage(id);
    }
    setValuesFromDictionary(decodeQueryParams());
    $('option[data-other]').each(function(idx, el) {
      return hookOther(el);
    });
    _ref1 = ['product-other'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      id = _ref1[_j];
      saveToAndRestoreFromLocalStorage(id);
    }
    $('#ticket-form').submit(function(e) {
      var data, host, url;

      e.preventDefault();
      data = serialize();
      host = 'https://livereload.herokuapp.com/';
      if (window.location.hostname === 'livereload.dev') {
        host = 'http://localhost:5000/';
      }
      url = host + 'support/submit';
      console.log("Sending to " + url + ": " + (JSON.stringify(data, null, 2)));
      $.ajax(url, {
        contentType: 'application/json',
        data: data,
        dataType: 'jsonp',
        cache: false,
        timeout: 30000,
        success: function(response, textStatus, xhr) {
          if (response.ok) {
            return alert("Ticket submitted succesfully; a copy has been sent to " + data.email + ".");
          } else {
            return handleFailedSubmittion("Failed to send email: " + response.message);
          }
        },
        error: function(xhr, textStatus, errorThrown) {
          return handleFailedSubmittion("" + textStatus + " -- " + errorThrown);
        },
        complete: function(xhr, textStatus) {}
      });
      return console.log('data = ' + JSON.stringify(data, null, 2));
    });
    emailCopyNoticeTemplate = $('#email-copy-notice').text();
    updateEmailCopyNotice = function() {
      return $('#email-copy-notice').text(emailCopyNoticeTemplate.replace('EMAIL', $('#email').val()));
    };
    $('#email').change(function() {
      return updateEmailCopyNotice();
    });
    updateEmailCopyNotice();
    setDefaultUrgency();
    urgencySetByUser = false;
    $('#urgency').change(function() {
      urgencySetByUser = true;
      return void 0;
    });
    $('#category').change(function() {
      if (!urgencySetByUser) {
        setDefaultUrgency();
      }
      return void 0;
    });
    return maintainDependencies(update);
  });

}).call(this);
